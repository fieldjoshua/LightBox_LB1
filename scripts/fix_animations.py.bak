#!/usr/bin/env python3
"""
Fix Animation Files Script

This script fixes common syntax errors in animation files:
1. Fixes indentation errors
2. Fixes missing colons in dictionaries
3. Updates matrix dimensions to use hub75.cols/rows
4. Updates direct HSV to RGB conversion
"""

import os
import re
import glob
import sys

def fix_animation_file(file_path):
    print(f"Fixing {file_path}...")
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Create backup if it doesn't exist
    backup_path = f"{file_path}.bak"
    if not os.path.exists(backup_path):
        with open(backup_path, 'w') as f:
            f.write(content)
        print(f"  Created backup at {backup_path}")
    
    # Fix 1: Fix indentation errors (remove extra indentation in animation body)
    lines = content.split('\n')
    fixed_lines = []
    in_animation_body = False
    
    for line in lines:
        if '"""Fire Hub75 animation' in line or '"""Aurora Hub75 animation' in line or '"""Cosmic Nebulas Hub75 animation' in line:
            in_animation_body = True
            fixed_lines.append(line)
        elif in_animation_body and line.startswith('        # '):
            # Fix indentation
            fixed_lines.append(line[4:])
        elif in_animation_body and line.startswith('        '):
            # Fix indentation
            fixed_lines.append(line[4:])
        elif in_animation_body and line.strip() == '':
            # End of animation body
            in_animation_body = False
            fixed_lines.append(line)
        else:
            fixed_lines.append(line)
    
    content = '\n'.join(fixed_lines)
    
    # Fix 2: Fix missing colons in dictionaries
    content = re.sub(r"'([^']+)'\s+(\[|{|\(|'|\"|[0-9])", r"'\1': \2", content)
    
    # Fix 3: Update matrix dimensions
    content = content.replace("matrix_width", "hub75.cols")
    content = content.replace("matrix_height", "hub75.rows")
    
    # Fix 4: Replace config method calls with direct implementations
    content = content.replace("config.xy_to_index(x, y)", "y * width + x")
    
    # Write fixed content
    with open(file_path, 'w') as f:
        f.write(content)
    
    print(f"  Fixed {file_path}")
    return True

def main():
    if len(sys.argv) > 1:
        # Fix specific file
        fix_animation_file(sys.argv[1])
    else:
        # Fix all animation files in scripts directory
        animation_files = glob.glob('scripts/*.py')
        fixed_count = 0
        
        for file_path in animation_files:
            if fix_animation_file(file_path):
                fixed_count += 1
        
        print(f"Fixed {fixed_count} animation files")

if __name__ == "__main__":
    main() 